import app_constants as app_consts
from typing import Dict, List
import intents


# A class called Prepare Request.
# The run method of this class will take a pre-processed request and return a dictionary that includes:
# A LLM prompt to be used for CodeLlama SQL generations
# A SQL script to be used along with the SQL generated by CodeLlama
class PrepareRequest:

    # A method to prepare a request
    def run(self, pre_processed_request: dict):

        # create a dictionary to store the prepared request
        prepared_request = {}

        # get the request intent
        intent = pre_processed_request[app_consts.INTENT]
        user_query = pre_processed_request[app_consts.USER_QUERY]
        identifiers = pre_processed_request[app_consts.IDENTIFIERS]

        # Based on the user intent (captured in the intent field in the pre-processed request)
        # configure the LLM prompt and, if necessary, the sql execution pre-amble
        # if intent in [das.INTENT_VACATION_MANAGEMENT]:
        if intent in intents.contexts.keys():
            # add the llm_prompt to the dictionary
            prepared_request[app_consts.LLM_PROMPT] = self.get_llm_prompt_payload(intent, user_query)
            # add the complete set of SQL statements to the dictionary
            prepared_request[app_consts.SQL_PREAMBLE] = \
                self.get_sql_preamble(intent, identifiers, ['athletes_in_focus'])
        else:
            # Error
            print(f"PrepareRequest: Intent: {pre_processed_request[app_consts.INTENT]} is not recognized.")
            print("Exiting...")
            exit(1)

        # return the prepared request
        return prepared_request

    @staticmethod
    def get_llm_prompt_payload(intent: str, user_query: str):
        if intent in intents.contexts.keys():
            system_prompt = intents.contexts[intent].SYSTEM_PROMPT
            user_prompt = intents.contexts[intent].USER_PROMPT + user_query
        else:
            # Error
            print(f"PrepareRequest: Intent: {intent} is not recognized.")
            print("Exiting...")
            exit(1)

        return system_prompt + user_prompt + "\n```\n"

    def get_sql_preamble(self, intent: str, identifiers: List, table_names: [str]):
        if intent in intents.contexts.keys():
            # if identifiers is not empty, generate identity inserts for each identifier
            stmts = intents.contexts[intent].SQL_PREAMBLE_PT1 if not identifiers else \
                intents.contexts[intent].SQL_PREAMBLE_PT1 + self.generate_identity_inserts(identifiers, table_names)
            return stmts + intents.contexts[intent].SQL_PREAMBLE_PT2
        else:
            # Error
            print(f"PrepareRequest: Intent: {intent} is not recognized.")
            print("Exiting...")
            exit(1)

    @staticmethod
    def generate_identity_inserts(identifiers: List, table_names: [str]):
        # if identifiers is empty, return []
        if identifiers == set():
            return []
        if len(table_names) == 1:
            table_name = table_names[0]

            identity_inserts = f"INSERT INTO {table_name} VALUES "
            i = 1
            for eid in identifiers:
                identity_inserts += f"({i},{eid['id']},\'{eid['name']}\')"
                # identity_inserts.append(f"(0, 22222, 'Mark Spitz');")
                identity_inserts += ", " if i < len(identifiers) else ";"
                i = i + 1
            return [identity_inserts]

